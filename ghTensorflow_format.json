{
    "Data Name": "Github Data for Tensorflow",
    "Creation Date": "2015-11-07T01:19:20Z",
    "Data Range Start": "2015-11-09T14:21:11Z",
    "Data Range End": "2022-12-19T16:23:21Z",
    "Version Information": 1.0,
    "Provenance Information": "Utlizes data/gh_Issues.json, data/gh_Pulls.json and dynamic requests to the Github API",
    "Predicted Symbols": [
        "tbd"
    ],
    "Prediction Period": "tbd",
    "Entities": [
        {
            "Id": 120409314,
            "Symbols": [
                {
                    "Contribution Type": "Issue Creator",
                    "Valid From": "2022-12-19T16:23:21Z",
                    "Valid To": null
                }
            ],
            "Properties": [
                {
                    "Follower type": "Less Followers",
                    "Committer Type": null,
                    "Valid From": "2022-12-12T17:38:57Z",
                    "Valid To": "2022-12-19T18:23:13Z"
                }
            ]
        },
        {
            "Id": 108657436,
            "Symbols": [
                {
                    "Contribution Type": "Issue Creator",
                    "Valid From": "2022-12-19T15:17:25Z",
                    "Valid To": null
                }
            ],
            "Properties": [
                {
                    "Follower type": "Less Followers",
                    "Committer Type": null,
                    "Valid From": "2022-07-04T07:50:56Z",
                    "Valid To": "2022-12-01T12:56:33Z"
                }
            ]
        },
        {
            "Id": 25260617,
            "Symbols": [
                {
                    "Contribution Type": "Issue Creator",
                    "Valid From": "2022-12-19T15:09:10Z",
                    "Valid To": null
                }
            ],
            "Properties": [
                {
                    "Follower type": "Less Followers",
                    "Committer Type": "Light Committer",
                    "Valid From": "2017-01-21T05:16:57Z",
                    "Valid To": "2022-11-28T21:20:43Z"
                }
            ]
        },
        {
            "Id": 30098201,
            "Symbols": [
                {
                    "Contribution Type": "Issue Creator",
                    "Valid From": "2022-12-19T13:55:26Z",
                    "Valid To": null
                }
            ],
            "Properties": [
                {
                    "Follower type": "Less Followers",
                    "Committer Type": "Light Committer",
                    "Valid From": "2017-07-12T01:53:05Z",
                    "Valid To": "2022-12-15T08:04:38Z"
                }
            ]
        },
        {
            "Id": 82587125,
            "Symbols": [
                {
                    "Contribution Type": "Issue Creator",
                    "Valid From": "2022-12-19T13:03:27Z",
                    "Valid To": null
                }
            ],
            "Properties": [
                {
                    "Follower type": "Less Followers",
                    "Committer Type": null,
                    "Valid From": "2021-04-15T11:53:04Z",
                    "Valid To": "2022-10-28T08:45:23Z"
                }
            ]
        },
        {
            "Id": 82651473,
            "Symbols": [
                {
                    "Contribution Type": "Issue Commenter",
                    "Valid From": "2022-12-19T13:34:21Z",
                    "Valid To": "2022-12-19T13:34:21Z"
                }
            ],
            "Properties": [
                {
                    "Follower type": "Less Followers",
                    "Committer Type": "Light Committer",
                    "Valid From": "2021-04-16T10:37:28Z",
                    "Valid To": "2022-06-28T09:34:04Z"
                }
            ]
        }
    ],
    "Data": [
        {
            "Timestamp": "2022-12-19T16:23:21Z",
            "EntityIds": [
                120409314,
                111861663
            ],
            "Symbol": "Issue Creation",
            "Relational ID": [
                "6G3Z9S7H2MYZ"
            ],
            "Context": "QR-code. /vendor/etc/selinux/vendor_mac_permissions.xml\n/vendor/etc/selinux/vendor_property_contexts\n/vendor/etc/selinux/vendor_seapp_contexts\n/vendor/etc/selinux/vendor_sepolicy.cil\n/vendor/etc/selinux/vendor_sepolicy_debug.cil\n/vendor/etc/selinux/vndservice_contexts\nThis configuration (sepolicy) is public domain, i.e. not copyrighted.\n\nWarranty Exclusion\n------------------\nYou agree that this software is a\nnon-commercially developed program that may contain \"bugs\" (as that\nterm is used in the industry) and that it may not function as intended.\nThe software is licensed \"as is\". NSA makes no, and hereby expressly\ndisclaims all, warranties, express, implied, statutory, or otherwise\nwith respect to the software, including noninfringement and the implied\nwarranties of merchantability and fitness for a particular purpose.\n\nLimitation of Liability\n-----------------------\nIn no event will NSA be liable for any damages, including loss of data,\nlost profits, cost of cover, or other special, incidental,\nconsequential, direct or indirect damages arising from the software or\nthe use thereof, however caused and on any theory of liability. This\nlimitation will apply even if NSA has been advised of the possibility\nof such damage. You acknowledge that this is a reasonable allocation of\nrisk.\n\nNotices for file(s):\n/kernel\n![code_202212191723006.png](https://user-images.githubusercontent.com/120409314/208472237-15dc6f27-4799-49ff-bf0c-c8bc98727aa9.png)\n"
        },
        {
            "Timestamp": "2022-12-19T15:17:25Z",
            "EntityIds": [
                108657436,
                81610181
            ],
            "Symbol": "Issue Creation",
            "Relational ID": [
                "TQKP5R9I5BXR"
            ],
            "Context": "unable to save function, WeightNormalization with Conv1DTranspose error. <details><summary>Click to expand!</summary> \n \n ### Issue Type\n\nBug\n\n### Source\n\nsource\n\n### Tensorflow Version\n\n2.11.0\n\n### Custom Code\n\nYes\n\n### OS Platform and Distribution\n\nUbuntu 20.04\n\n### Mobile device\n\n_No response_\n\n### Python version\n\n3.9.12\n\n### Bazel version\n\n_No response_\n\n### GCC/Compiler version\n\n_No response_\n\n### CUDA/cuDNN version\n\nnvidia-cudnn-cu11==8.6.0.163\n\n### GPU model and memory\n\nRTX 3080TI \n\n### Current Behaviour?\n\n```shell\nFrom the official tutorial on melGAN here: https://keras.io/examples/audio/melgan_spectrogram_inversion/\r\nThe problem occurs with addon_layers.WeightNormalization wrapped around Conv1DTranspose layer. The normalization works on other layers such as Conv1D but not the Conv1DTranspose layer. The model trains fine but error arises when saving the model with error message:\r\nValueError: Unable to save function b'__inference_conv1d_transpose_3_layer_call_and_return_conditional_losses_101006' because it captures graph tensor Tensor(\"weight_normalization_21/compute_weights/mul:0\", shape=(16, 32, 64), dtype=float32) from a parent function which cannot be converted to a constant with `tf.get_static_value`\r\n\r\n\r\nclass ConvBlock(layers.Layer):\r\n    def __init__(self, conv_dim, upsampling_factor):\r\n        super().__init__()\r\n        self.conv_t = addon_layers.WeightNormalization(Conv1DTranspose(conv_dim, 16, upsampling_factor, padding=\"same\"), data_init=False)\r\n        #self.conv_t = Conv1DTranspose(conv_dim, 16, upsampling_factor, padding=\"same\")\r\n        self.res_block = ResidualBlock(conv_dim)\r\n\r\n    def call(self, X, training=False):\r\n        t1 = self.conv_t(X, training=training)\r\n        c1 = tf.nn.leaky_relu(t1, 0.3)\r\n        out = self.res_block(c1, training=training) #I've put the leakly_relu activation into res_block\r\n        return out\r\n```\n```\n\n\n### Standalone code to reproduce the issue\n\n```shell\nhttps://keras.io/examples/audio/melgan_spectrogram_inversion/\n```\n\n\n### Relevant log output\n\n```shell\nValueError: Unable to save function b'__inference_conv1d_transpose_3_layer_call_and_return_conditional_losses_101006' because it captures graph tensor Tensor(\"weight_normalization_21/compute_weights/mul:0\", shape=(16, 32, 64), dtype=float32) from a parent function which cannot be converted to a constant with `tf.get_static_value`\n```\n</details>"
        },
        {
            "Timestamp": "2022-12-19T15:09:10Z",
            "EntityIds": [
                25260617,
                86464649
            ],
            "Symbol": "Issue Creation",
            "Relational ID": [
                "140ACLL31B8B"
            ],
            "Context": "Suggested Build Params For Older Gen Intel CPU. <details><summary>Click to expand!</summary> \n \n ### Issue Type\n\nSupport\n\n### Source\n\nsource\n\n### Tensorflow Version\n\n2.12\n\n### Custom Code\n\nYes\n\n### OS Platform and Distribution\n\nLinux Ubuntu 20.04\n\n### Mobile device\n\n_No response_\n\n### Python version\n\n3.9\n\n### Bazel version\n\n5.3\n\n### GCC/Compiler version\n\n_No response_\n\n### CUDA/cuDNN version\n\nn/a\n\n### GPU model and memory\n\nn/a\n\n### Current Behaviour?\n\n```shell\nJust wondering what the suggested build parameters would be for an Intel Xeon E5-4650V2 with no GPU? Here are the specs when running lscpu:\r\n\r\n\r\nCPU op-mode(s):                  32-bit, 64-bit\r\nByte Order:                      Little Endian\r\nAddress sizes:                   40 bits physical, 48 bits virtual\r\nCPU(s):                          16\r\nOn-line CPU(s) list:             0-15\r\nThread(s) per core:              1\r\nCore(s) per socket:              8\r\nSocket(s):                       2\r\nNUMA node(s):                    1\r\nVendor ID:                       GenuineIntel\r\nCPU family:                      15\r\nModel:                           6\r\nModel name:                      Common KVM processor\r\nStepping:                        1\r\nCPU MHz:                         2493.988\r\nBogoMIPS:                        4987.97\r\nHypervisor vendor:               KVM\r\nVirtualization type:             full\r\nL1d cache:                       512 KiB\r\nL1i cache:                       512 KiB\r\nL2 cache:                        64 MiB\r\nL3 cache:                        32 MiB\r\nNUMA node0 CPU(s):               0-15\r\nVulnerability Itlb multihit:     KVM: Vulnerable\r\nVulnerability L1tf:              Mitigation; PTE Inversion\r\nVulnerability Mds:               Vulnerable: Clear CPU buffers attempted, no microcode; SMT Host state unknown\r\nVulnerability Meltdown:          Mitigation; PTI\r\nVulnerability Mmio stale data:   Unknown: No mitigations\r\nVulnerability Retbleed:          Not affected\r\nVulnerability Spec store bypass: Vulnerable\r\nVulnerability Spectre v1:        Mitigation; usercopy/swapgs barriers and __user pointer sanitization\r\nVulnerability Spectre v2:        Mitigation; Retpolines, STIBP disabled, RSB filling, PBRSB-eIBRS Not affected\r\nVulnerability Srbds:             Not affected\r\nVulnerability Tsx async abort:   Not affected\r\nFlags:                           fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ht syscall nx lm constant_tsc nopl xtopology cpuid tsc_known_freq pni cx16 x2apic hypervisor lahf_lm cpuid_fault\r\n                                  pti\r\n```\r\n\r\nI would use the default `pip install tensorflow`, but I get the error that our CPU doesn't support sse4.1 and a bunch of other errors that are cause our scripts to fail.\r\n\r\nRight now I've successfully built the `whl` file once, but I'm not sure if I used the right flags.\n```\n\n\n### Standalone code to reproduce the issue\n\n```shell\n`pip install tensorflow` results in errors stating that our CPU doesn't support sse4.2, sse4.1, etc.\n```\n\n\n### Relevant log output\n\n_No response_</details>"
        },
        {
            "Timestamp": "2022-12-19T13:55:26Z",
            "EntityIds": [
                30098201,
                111861663
            ],
            "Symbol": "Issue Creation",
            "Relational ID": [
                "EHBRDJ7VOEFK"
            ],
            "Context": "Clog Copy-Paste Error. <details><summary>Click to expand!</summary> \r\n \r\n ### Issue Type\r\n\r\nBug\r\n\r\n### Source\r\n\r\nsource\r\n\r\n### Tensorflow Version\r\n\r\nmaster\r\n\r\n### Custom Code\r\n\r\nNo\r\n\r\n### OS Platform and Distribution\r\n\r\nAny\r\n\r\n### Mobile device\r\n\r\n_No response_\r\n\r\n### Python version\r\n\r\n_No response_\r\n\r\n### Bazel version\r\n\r\n_No response_\r\n\r\n### GCC/Compiler version\r\n\r\n_No response_\r\n\r\n### CUDA/cuDNN version\r\n\r\n_No response_\r\n\r\n### GPU model and memory\r\n\r\n_No response_\r\n\r\n### Current Behaviour?\r\n\r\nIn [workspace2.bzl](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/workspace2.bzl#L162) on line 162 clog was copy and pasted from cpu-info (below it) so both import the same archive and clog is not included.\r\n\r\n```bash\r\n    tf_http_archive(\r\n        name = \"clog\",\r\n        strip_prefix = \"cpuinfo-5e63739504f0f8e18e941bd63b2d6d42536c7d90\",\r\n        sha256 = \"18eca9bc8d9c4ce5496d0d2be9f456d55cbbb5f0639a551ce9c8bac2e84d85fe\",\r\n        urls = tf_mirror_urls(\"https://github.com/pytorch/cpuinfo/archive/5e63739504f0f8e18e941bd63b2d6d42536c7d90.tar.gz\"),\r\n    )\r\n\r\n    tf_http_archive(\r\n        name = \"cpuinfo\",\r\n        strip_prefix = \"cpuinfo-5e63739504f0f8e18e941bd63b2d6d42536c7d90\",\r\n        sha256 = \"18eca9bc8d9c4ce5496d0d2be9f456d55cbbb5f0639a551ce9c8bac2e84d85fe\",\r\n        urls = tf_mirror_urls(\"https://github.com/pytorch/cpuinfo/archive/5e63739504f0f8e18e941bd63b2d6d42536c7d90.tar.gz\"),\r\n    )\r\n```\r\n\r\n\r\n### Standalone code to reproduce the issue\r\n\r\n```shell\r\nView master branch\r\n```\r\n\r\n\r\n### Relevant log output\r\n\r\n_No response_</details>"
        },
        {
            "Timestamp": "2022-12-19T13:03:27Z",
            "EntityIds": [
                82587125,
                48215717,
                82651473
            ],
            "Symbol": "Issue Creation",
            "Relational ID": [
                "NXYS2I2DQ2Y3"
            ],
            "Context": "[AMD-ZENDNN] Environment variable to enable AMD-ZENDNN plugin. This pull request introduces the environment variable to enable AMD-ZENDNN Plugin\r\nAll code changes are under AMD_ZENDNN flag which is enabled for linux builds only.\r\n\r\nAuthors:\r\n    Aakar Dwivedi ( aakar.dwivedi@amd.com )\r\n    Chandra Kumar Ramasamy ( chandrakumar.ramasamy@amd.com )\r\n    Savan Anadani ( savan.anadani@amd.com )\r\n\r\nSigned-off-by: Aakar Dwivedi <Aakar.Dwivedi@amd.com>"
        },
        {
            "Timestamp": "2022-12-19T13:34:21Z",
            "EntityIds": [
                82587125,
                48215717,
                82651473
            ],
            "Symbol": "Issue Comment",
            "Relational ID": [
                "NXYS2I2DQ2Y3"
            ],
            "Context": "/cc @penpornk"
        }
    ]
}